{"version":3,"sources":["logo.svg","Clock.js","Counter.js","App.js","reportWebVitals.js","index.js"],"names":["Clock","state","date","Date","this","time","setInterval","tick","clearInterval","setState","hours","getHours","style","textAlign","marginBottom","dayTime","toLocaleTimeString","React","Component","Counter","counter","prevState","onClick","subtract","bind","add","reset","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAAe,I,iCC6DAA,E,kDA1DX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,KAAM,IAAIC,MAHL,E,gEAMO,IAAD,OACfC,KAAKC,KAAOC,aAAY,WACpB,EAAKC,SACP,O,2CAKFC,cAAcJ,KAAKC,Q,6BAInBD,KAAKK,SAAS,CACVP,KAAM,IAAIC,S,gCAKd,IAAIO,EAAQN,KAAKH,MAAMC,KAAKS,WAY5B,OAVGD,EAAQ,GACK,UAEPA,GAAQ,IAAMA,EAAQ,GACf,YAGA,Y,+BAchB,OACI,sBAAKE,MAAO,CAACC,UAAW,SAAUC,aAAc,QAAhD,UACI,uCAAUV,KAAKW,UAAf,OACA,6BAAKX,KAAKH,MAAMC,KAAKc,8B,GAnDjBC,IAAMC,WC4CXC,E,kDA3CX,aAAc,IAAD,8BACT,gBACKlB,MAAQ,CAACmB,QAAS,GAFd,E,kDAMThB,KAAKK,UAAS,SAAAY,GACV,MAAO,CACHD,QAASC,EAAUD,QAAU,Q,iCAMrChB,KAAKK,UAAS,SAAAY,GACV,MAAO,CACHD,QAASC,EAAUD,QAAU,Q,8BAMrChB,KAAKK,SAAS,CACVW,QAAS,M,+BAKb,OACI,sBAAKR,MAAO,CAACC,UAAW,UAAxB,UACI,6BAAKT,KAAKH,MAAMmB,UAChB,wBAAQE,QAASlB,KAAKmB,SAASC,KAAKpB,MAApC,eACA,wBAAQkB,QAASlB,KAAKqB,IAAID,KAAKpB,MAA/B,eACA,8BACA,wBAAQkB,QAASlB,KAAKsB,MAAMF,KAAKpB,MAAjC,4B,GAnCMa,IAAMC,WCSbS,ICCAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1b0700cb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\n\r\nclass Clock extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            date: new Date()}\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.time = setInterval(() => {\r\n            this.tick()\r\n        },1000)\r\n\r\n    }\r\n\r\n    componentWillMount(){\r\n        clearInterval(this.time)\r\n    }\r\n\r\n    tick(){\r\n        this.setState({\r\n            date: new Date()\r\n        });\r\n    }\r\n\r\n    dayTime() {\r\n        let hours = this.state.date.getHours();\r\n        let timeOfDay;\r\n        if(hours < 12) {\r\n            timeOfDay = \"morning\";\r\n        }\r\n        else if (hours >=12 && hours < 17) {\r\n            timeOfDay = \"afternoon\";\r\n        }\r\n        else {\r\n            timeOfDay = \"evening\";\r\n        }\r\n\r\n        return(\r\n            timeOfDay\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return(\r\n            <div style={{textAlign: 'center', marginBottom: '50px'}}>\r\n                <h1>Good {this.dayTime()}!</h1>\r\n                <h1>{this.state.date.toLocaleTimeString()}</h1>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Clock;","import React from \"react\";\r\n\r\nclass Counter extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {counter: 0}\r\n    }\r\n\r\n    add(){\r\n        this.setState(prevState => {\r\n            return {\r\n                counter: prevState.counter + 1\r\n            }     \r\n        })\r\n    }\r\n\r\n    subtract(){\r\n        this.setState(prevState => {\r\n            return {\r\n                counter: prevState.counter + 1\r\n            }     \r\n        })\r\n    }\r\n\r\n    reset(){\r\n        this.setState({\r\n            counter: 0 \r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div style={{textAlign: 'center'}}>\r\n                <h1>{this.state.counter}</h1>\r\n                <button onClick={this.subtract.bind(this)}>-</button>\r\n                <button onClick={this.add.bind(this)}>+</button>\r\n                <div>\r\n                <button onClick={this.reset.bind(this)}>RESET</button>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Counter;","import logo from './logo.svg';\nimport './App.css';\nimport Clock from './Clock';\nimport Counter from './Counter';\n\nfunction App() {\n  return (\n   <h1>Hello World!</h1>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Clock from './Clock';\nimport Counter from './Counter';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Clock />\n    <Counter />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}